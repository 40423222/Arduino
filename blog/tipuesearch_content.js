var tipuesearch = {"pages":[{"tags":"misc","text":"Python: https://40423222.github.io/Python/blog Arduino: https://40423222.github.io/Arduino/blog Gripper: https://40423222.github.io/Gripper/blog Unlock: https://40423222.github.io/Unlock/blog HTML: https://40423222.github.io/HTML/blog HexadecimalColorTable: https://40423222.github.io/HexadecimalColorTable/blog","title":"About","url":"./pages/about/"},{"tags":"Arduino","text":"以下為9V_BatteryAdapter的解說 9V_BatteryAdapter零件: 9V_BatteryAdapter裝配方式: 參考網站: http://www.high-altitude-balloon.com/Arduino-9V-Battery https://www.geeetech.com/9v5v-battery-adapter-for-arduino-p-23.html","title":"9V_BatteryAdapter 9V外接電源","url":"./9V_BatteryAdapter.html"},{"tags":"Arduino","text":"以下為L298N的解說 L298N零件: Potentiometer裝配方式: 運作原理: 4跟5和6跟7分別控制A1跟A2和B1跟B2,下圖有完整操作資料 參考網站: http://goods.ruten.com.tw/item/show?21401288480536 http://designer.mech.yzu.edu.tw/articlesystem/article/compressedfile/(2013-02-18)%20%E4%BD%BF%E7%94%A8%E9%A6%AC%E9%81%94%E9%A9%85%E5%8B%95IC%E6%90%AD%E9%85%8DArduino%20Uno%E6%8E%A7%E5%88%B6%E9%A6%AC%E9%81%94%E8%BC%B8%E5%87%BA.aspx?ArchID=2006","title":"L298N 雙直流馬達正反轉","url":"./L298N.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的L298實驗 需要材料: Wire: n個 Button : 兩個 10kΩ Resistor : 兩個 12Vbattery: 1個 9V_BatteryAdapter : 1個(提供電力給Arduino Uno) DC Motor: 兩個 L298N : 一個 Arduino Uno : 一個 Breadboard: 一個 電路圖(Circuit diagram) 程式碼(Code) const int buttonGo = 2; //前進 const int buttonBack = 3; //後退 int Go = 0; //定義Go,為了要讀取buttonGo int Back = 0; //定義Back,為了要讀取buttonBack int AmotorA = 4; //控制正反轉 int AmotorB = 5; //控制正反轉 int BmotorA = 6; //控制正反轉 int BmotorB = 7; //控制正反轉 void setup() { pinMode(buttonGo, INPUT); pinMode(buttonBack, INPUT); } void loop() { Go = digitalRead(buttonGo); Back = digitalRead(buttonBack); if (Go == HIGH) { digitalWrite(AmotorA, HIGH); digitalWrite(AmotorB, LOW); digitalWrite(BmotorA, HIGH); digitalWrite(BmotorB, LOW); } else { digitalWrite(AmotorA, LOW); digitalWrite(AmotorB, LOW); digitalWrite(BmotorA, LOW); digitalWrite(BmotorB, LOW); } if (Back == HIGH) { digitalWrite(AmotorA, LOW); digitalWrite(AmotorB, HIGH); digitalWrite(BmotorA, LOW); digitalWrite(BmotorB, HIGH); } else { digitalWrite(AmotorA, LOW); digitalWrite(AmotorB, LOW); digitalWrite(BmotorA, LOW); digitalWrite(BmotorB, LOW); } } 顯示結果: 說明: 當按住其中一個按鈕(2=H or 3=H) 參考網站: http://goods.ruten.com.tw/item/show?21401288480536 http://designer.mech.yzu.edu.tw/articlesystem/article/compressedfile/(2013-02-18)%20%E4%BD%BF%E7%94%A8%E9%A6%AC%E9%81%94%E9%A9%85%E5%8B%95IC%E6%90%AD%E9%85%8DArduino%20Uno%E6%8E%A7%E5%88%B6%E9%A6%AC%E9%81%94%E8%BC%B8%E5%87%BA.aspx?ArchID=2006","title":"L298N 馬達控制板","url":"./L298NControl.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的InfraredType實驗 需要材料: Wire: n個 InfraredReceiver: 一個 InfraredRemoteControl: 一個 Arduino Uno : 一個 電路圖(Circuit diagram) 注意: 正負極接相反,接收器會燒壞 程式碼(Code) #include <IRremote.h> // 引用 IRRemote 函式庫 const int irReceiverPin = 2; // 紅外線接收器 OUTPUT 訊號接在 pin 2 IRrecv irrecv(irReceiverPin); // 定義 IRrecv 物件來接收紅外線訊號 decode_results results; // 解碼結果將放在 decode_results 結構的 result 變數裏 void setup() { Serial.begin(9600); // 開啟 Serial port, 通訊速率為 9600 bps irrecv.enableIRIn(); // 啟動紅外線解碼 } // 顯示紅外線協定種類 void showIRProtocol(decode_results *results) { Serial.print(\"Protocol: \"); // 判斷紅外線協定種類 switch(results->decode_type) { case NEC: Serial.print(\"NEC\"); break; case SONY: Serial.print(\"SONY\"); break; case RC5: Serial.print(\"RC5\"); break; case RC6: Serial.print(\"RC6\"); break; default: Serial.print(\"Unknown encoding\"); } // 把紅外線編碼印到 Serial port Serial.print(\", irCode: \"); Serial.print(results->value, HEX); // 紅外線編碼 Serial.print(\", bits: \"); Serial.println(results->bits); // 紅外線編碼位元數 } void loop() { if (irrecv.decode(&results;)) { // 解碼成功，收到一組紅外線訊號 showIRProtocol(&results;); // 顯示紅外線協定種類 irrecv.resume(); // 繼續收下一組紅外線訊號 } } 顯示結果: 參考網站: http://coopermaa2nd.blogspot.tw/2011/03/12.html 參考對象:","title":"InfraredType 顯示接收的紅外線","url":"./InfraredType.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的Vin實驗 需要材料: Wire: n個 LED : 一個 battery: 四個 ServoMotor: 一個 Arduino Uno : 一個 電路圖(Circuit diagram) 注意: 電池要串聯 程式碼(Code) 自動控制伺服馬達 void setup() { // 13腳輸出電給LED pinMode(13, OUTPUT); } void loop() { digitalWrite(13, HIGH); // 通電 delay(1000); // 持續1秒 digitalWrite(13, LOW); // 斷電 delay(1000); // 持續1秒 } 參考網站: http://coopermaa2nd.blogspot.tw/2010/12/arduino-lab1-blinking-led.html http://pizgchen.blogspot.tw/2014/03/arduinovin-pin12v.html 參考對象:","title":"Vin 外部供電","url":"./Vin.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的ControlServoMotor實驗 需要材料: Wire: n個 Potentiometer : 一個(不限電駔大小) ServoMotor: 一個 Arduino Uno : 一個 電路圖(Circuit diagram) 程式碼(Code) 自動控制伺服馬達 // 引用 Servo Library #include // 建立一個 Servo 物件 Servo myservo; // 旋轉角度 int value = 0; void setup() { myservo.attach(9); // Servo 接在 pin 9 } void loop() { if (value == 0) value = 180; else value = 0; // 叫 Servo 旋轉角度: // myservo.write(0) 是叫 Servo 旋轉到 0 度的位置 // myservo.write(180) 是叫 Servo 旋轉到 180 度的位置 myservo.write(value); delay(1500); } 可變電阻控制伺服馬達 // 使用可變電阻控制 Servo 的旋轉角度 // by Michal Rinott // 引用 Servo Library #include // 建立一個 Servo 物件 Servo myservo; // 可變電阻接在 Analog pin 0 int potpin = 0; // 儲存旋轉角度的變數 int val; void setup() { myservo.attach(9); // Servo 接在 pin 9 } void loop() { val = analogRead(potpin); // 讀取可變電阻(數值介於 0 到 1023) val = map(val, 0, 1023, 0, 179); // 把 0 - 1023 的數值按比例縮放為 0 - 180 的數值 myservo.write(val); // 設定 Servo 旋轉角度 delay(15); // 等待 Servo 旋轉指定的位置 } 參考網站: http://coopermaa2nd.blogspot.tw/2011/01/arduino-lab16.html 參考對象:","title":"ControlServoMotor 控制伺服馬達","url":"./ControlServoMotor.html"},{"tags":"Arduino","text":"以下為電子實習的Final report Final report 需要材料: Wire: n個 Button : 一個 220Ω Resistor : 一個 10kΩ Resistor : 一個 500Ω Potentiometer : 一個(不限電駔大小) LED : 一個 Arduino Uno : 一個 Breadboard: 一個 電路圖(Circuit diagram) 程式碼(Code) int ledPin = 13; volatile int state = LOW; void setup() { pinMode(ledPin, OUTPUT); attachInterrupt(1, blink, RISING); } void blink() { state = !state; // LOW轉成HIGH 或 HIGH轉成LOW } void loop() { digitalWrite(ledPin, state); delay(50); } /* 程式解說 Pin13為開啟LED的腳位 state為HIGH 或 LOW,以attachlnterrupt控制帶入void blink公式 每當Pin3的電壓上升時,將會啟動void blink公式,而啟動Pin3為HIGH或LOW */ 流程圖 影片(Video) Final report from 40423222 on Vimeo . 使用容器 點擊圖片連結 參考網站: 產品影片: https://www.youtube.com/watch?v=FsFbzvJpeMo 參考對象: 產品網站: https://www.pinkoi.com/product/1z4BOWzK?gclid=CM652u-CrdQCFRIKKgodqXIBsA 參考對象:","title":"FinalReport 電子學期末報告","url":"./FinalReport.html"},{"tags":"Arduino","text":"以下為Potentiometer的解說 Potentiometer零件: Potentiometer裝配方式: 運作原理: 可變電阻有三個腳位,左右兩腳如上圖是連接火線跟地線(也可左接LOW右接HIGH),而假如你選擇了500Ω,那左右兩腳的電阻就是500Ω,重點是中間的腳位,轉動旋鈕可改變中間腳位的電阻,也就可以改變輸出的電流. 注意: 當你選擇了500Ω的可變電阻,那中間腳位的最大電阻也就是500Ω 參考網站: 1.Potentiometer零件圖: https://store.fut-electronics.com/collections/potentiometers 參考對象:","title":"Potentiometer 可變電阻","url":"./Potentiometer.html"},{"tags":"Arduino","text":"以下為電子實習的exam 需要材料: Wire: n個 Button : 一個 330Ω Resistor : 五個 1kΩ Resistor : 一個 10kΩ Resistor : 一個 Potentiometer : 一個(不限電駔大小) NPN 9013: 一個 Arduino Uno : 一個 LED : 五個 Breadboard: 一個 DC Motor: 一個 電路圖(Circuit diagram) 程式碼(Code) int potenPin = A0; // 可變電阻 int buttonPin = 2; // 按鈕 int ledPins [] {3, 4, 5, 6, 7}; // led燈 int motorPin = 9; // 馬達 // 六段變速 100/300/500/700/900/1000 void setup() { Serial.begin(9600); pinMode(potenPin, INPUT); pinMode(buttonPin, INPUT); for(int L = 0; L < 5; L++) { pinMode(ledPins[L], OUTPUT); } pinMode(motorPin, OUTPUT); } void loop() { int motorValue = analogRead(potenPin); Serial.println(motorValue); int bStop = digitalRead(buttonPin); Serial.println(bStop); if (bStop == LOW) { if (motorValue < 100) { analogWrite(motorPin, 0); for (int L = 0; L < 5; L++) { digitalWrite(ledPins[L], LOW); } } else if (motorValue < 300) { analogWrite(motorPin, 300); for (int L = 0; L < 1; L++) { digitalWrite(ledPins[L], HIGH); } for (int L = 1; L < 5; L++) { digitalWrite(ledPins[L], LOW); } } else if (motorValue < 500) { analogWrite(motorPin, 500); for (int L = 0; L < 2; L++) { digitalWrite(ledPins[L], HIGH); } for (int L = 2; L < 5; L++) { digitalWrite(ledPins[L], LOW); } } else if (motorValue < 700) { analogWrite(motorPin, 700); for (int L = 0; L < 3; L++) { digitalWrite(ledPins[L], HIGH); } for (int L = 3; L < 5; L++) { digitalWrite(ledPins[L], LOW); } } else if (motorValue < 900) { analogWrite(motorPin, 900); for (int L = 0; L < 4; L++) { digitalWrite(ledPins[L], HIGH); } for (int L = 4; L < 5; L++) { digitalWrite(ledPins[L], LOW); } } else if (900 < motorValue) { analogWrite(motorPin, 1000); for (int L = 0; L < 5; L++) { digitalWrite(ledPins[L], HIGH); } } } else if (bStop == HIGH) { for(int s = 0; s < 5; s++) { digitalWrite(ledPins[s],LOW); } digitalWrite(motorPin,LOW); delay(100); } } 影片(Video) small exam from 40423222 on Vimeo . 參考網站: levelMotor: https://40423222.github.io/2017springcd_hw/blog/Arduino-threeLevel_Motor.html 參考對象: https://40423222.github.io/2017springcd_hw/blog/ 參考對象:","title":"SmallExam 電子學小考","url":"./SmallExam.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的UsePhotocell實驗 需要材料: Wire: n個 10kΩ Resistor : 一個 LDR: 一個 Arduino Uno : 一個 Breadboard: 一個 電路圖(Circuit diagram) 程式碼(Code) int ledPin = 10; int photocellPin = A2; //在越亮的地方電阻就越小,測出來的值就越大 int photocellState = 250; //在我房間桌上(連接10k的地線),不會超出250值 //連接不同電阻的地線,會顯示不同的值,而地線的電阻小,顯示的式值也小,也就代表沒電流流到A2 void setup() { pinMode(ledPin, OUTPUT); Serial.begin(9600); pinMode(photocellPin,INPUT); } void loop() { int photocellValue = analogRead(photocellPin); Serial.println(photocellValue); if(photocellValue < photocellState) { digitalWrite(ledPin, HIGH); } else if(photocellState < photocellValue) { digitalWrite(ledPin, LOW); } delay(500); } 參考網站: Lab8 photocell: http://coopermaa2nd.blogspot.tw/2010/12/arduino-lab8-led.html 參考對象:","title":"UsePhotocell 使用光敏電阻","url":"./UsePhotocell.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的Start_SevenSegments實驗,使用boolean指令,顯示0到9的數字 需要材料: Wire: n個 330Ω Resistor : 八個 L-Seven-segment display: 一個 Arduino Uno : 一個 Breadboard: 一個 電路圖(Circuit diagram) 程式碼(Code) //使用共陰極七段顯示器,也可用於LED排列發光 const int NUM = 8; //也可用#define NUM 8,但不能只打int NUM = 8; //使用到的腳位 int pins[NUM] = {2, 3, 4, 5, 10, 11, 12, 13}; //2為右上 3為上 4為點 5為右下 10為左上 11為中 12為下 13為左下 //代表腳位顯示的位置 #define t true //true等於HIHG,另一種寫法 #define f false //false等於LOW,另一種寫法 boolean data[10][NUM] = { //有十種變化(代表數字0~9),腳位有NUM個(8個輸出) {t, t, f, t, t, f, t, t}, // 顯示的號碼0 {t, f, f, t, f, f, f, f}, // 1 {t, t, f, f, f, t, t, t}, // 2 {t, t, f, t, f, t, t, f}, // 3 {t, f, f, t, t, t, f, f}, // 4 {f, t, f, t, t, t, t, f}, // 5 {f, t, f, t, t, t, t, t}, // 6 {t, t, f, t, t, f, f, f}, // 7 {t, t, f, t, t, t, t, t}, // 8 {t, t, f, t, t, t, t, f}, // 9 }; void setup() { for(int i = 0; i < NUM; i++){ //i大於NUM時結束for迴圈,因i < NUM pinMode(pins[i], OUTPUT); //i為0時pins為2,最多到7(i < NUM),也就是pins = (2~5,10~13) } } void writeNumber(int n){ //建立一個名稱為writeNumber(n)的公式 for(int i = 0; i < NUM; i++){ digitalWrite(pins[i], data[n][i] == t ? HIGH : LOW); //n在下方,data[幾種][輸出]一種內有8個輸出 //這一種的輸出,有t(true)的為HIGH不是為LOW } } void loop() { for(int n = 0; n <= 9; n++){ writeNumber(n); //將建立的writeNumber(n)放到這 delay(1000); } } 參考網站: Lab7 Seven_Segments: http://yehnan.blogspot.tw/2012/02/arduinoseven-segment-display.html 參考對象:","title":"Start_SevenSegments 啟動七段顯示器","url":"./Start_SevenSegments.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的StartBuzzer實驗 需要材料: Wire: n個 Buzzer: 一個 Arduino Uno : 一個 Breadboard: 一個 電路圖(Circuit diagram) 程式碼(Code) #include \"pitches.h\" //這就是最重要的重點 int melody[] { NOTE_C5,NOTE_D5,NOTE_B0 }; //吵死了 int duration = 500; void setup() { // put your setup code here, to run once: } void loop() { for (int thisNote = 0; thisNote < 3; thisNote++) { tone(11,melody[thisNote],duration); //是的 uno 板子只有 3,5,6,9,10,11 才有 PWM //不過 tone() 內部是用 timer 控制的，所以不限定任何 pin //analogWrite() 的頻率是固定的(500Hz)，沒辦法輸出不同音階的聲音 delay(500); } delay(2000); } 注意 在本程式的資料夾內建立pitches.h,如下圖 pitches.h的內容 / * * * * * * * * Public Constants * * * * * * * / define NOTE_B0 31 define NOTE_C1 33 define NOTE_CS1 35 define NOTE_D1 37 define NOTE_DS1 39 define NOTE_E1 41 define NOTE_F1 44 define NOTE_FS1 46 define NOTE_G1 49 define NOTE_GS1 52 define NOTE_A1 55 define NOTE_AS1 58 define NOTE_B1 62 define NOTE_C2 65 define NOTE_CS2 69 define NOTE_D2 73 define NOTE_DS2 78 define NOTE_E2 82 define NOTE_F2 87 define NOTE_FS2 93 define NOTE_G2 98 define NOTE_GS2 104 define NOTE_A2 110 define NOTE_AS2 117 define NOTE_B2 123 define NOTE_C3 131 define NOTE_CS3 139 define NOTE_D3 147 define NOTE_DS3 156 define NOTE_E3 165 define NOTE_F3 175 define NOTE_FS3 185 define NOTE_G3 196 define NOTE_GS3 208 define NOTE_A3 220 define NOTE_AS3 233 define NOTE_B3 247 define NOTE_C4 262 define NOTE_CS4 277 define NOTE_D4 294 define NOTE_DS4 311 define NOTE_E4 330 define NOTE_F4 349 define NOTE_FS4 370 define NOTE_G4 392 define NOTE_GS4 415 define NOTE_A4 440 define NOTE_AS4 466 define NOTE_B4 494 define NOTE_C5 523 define NOTE_CS5 554 define NOTE_D5 587 define NOTE_DS5 622 define NOTE_E5 659 define NOTE_F5 698 define NOTE_FS5 740 define NOTE_G5 784 define NOTE_GS5 831 define NOTE_A5 880 define NOTE_AS5 932 define NOTE_B5 988 define NOTE_C6 1047 define NOTE_CS6 1109 define NOTE_D6 1175 define NOTE_DS6 1245 define NOTE_E6 1319 define NOTE_F6 1397 define NOTE_FS6 1480 define NOTE_G6 1568 define NOTE_GS6 1661 define NOTE_A6 1760 define NOTE_AS6 1865 define NOTE_B6 1976 define NOTE_C7 2093 define NOTE_CS7 2217 define NOTE_D7 2349 define NOTE_DS7 2489 define NOTE_E7 2637 define NOTE_F7 2794 define NOTE_FS7 2960 define NOTE_G7 3136 define NOTE_GS7 3322 define NOTE_A7 3520 define NOTE_AS7 3729 define NOTE_B7 3951 define NOTE_C8 4186 define NOTE_CS8 4435 define NOTE_D8 4699 define NOTE_DS8 4978 參考網站: Lab6 Buzzer: http://coopermaa2nd.blogspot.tw/2010/12/arduino-lab6.html 參考對象:","title":"StartBuzzer 啟動喇叭","url":"./StartBuzzer.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的LED_BarGraph實驗 需要材料: Wire: n個 330Ω Resistor : 六個 LED : 六個 Arduino Uno : 一個 Breadboard: 一個 電路圖(Circuit diagram) 程式碼(Code) const int ledCount = 6; //有沒有在前面加const都沒差 int ledPins[] = { //腳位能重複輸入 2, 3, 7, 10, 11, 13}; void setup() { //Serial.begin(9600); for (int thisLed = 0; thisLed < ledCount; thisLed++) { //不能等於10因為0也算一個數 pinMode(ledPins[thisLed],OUTPUT); } } void loop() { for (int thisLed = 0; thisLed < ledCount; thisLed++) { int ledSerial = analogRead(thisLed); //analog用於(類比訊號) //digital用於(數位訊號) Read(讀取這值) //Serial.println(ledSerial); //要查看thisLed的值, //就要丟到for裡才行,因為thisLed只會在for裡執行 digitalWrite(ledPins[thisLed], HIGH); delay(300); digitalWrite(ledPins[thisLed], LOW); } for (int thisLed = ledCount-1; thisLed >= 0; thisLed--) { int ledSerial = analogRead(thisLed); Serial.println(ledSerial); digitalWrite(ledPins[thisLed], HIGH); delay(300); if (thisLed == 0) { //在for內使用if delay(1000); } else { digitalWrite(ledPins[thisLed], LOW); } } } 參考網站: Lab5 LED_Bar_Graph: http://coopermaa2nd.blogspot.tw/2010/12/arduino-lab5-led-bar-graph.html 參考對象:","title":"LED_BarGraph 連續啟動LED","url":"./LED_BarGraph.html"},{"tags":"Arduino","text":"以下為H_SevenSegmentDisplay的解說 陽性七段顯示器零件: H-Seven-segment display裝配方式: 連接 IC 7447 加上電阻以防顯示器燒壞 H-Seven-segment display功用: a~f跟p的腳位接上200電阻接地就會顯示七電顯示器的a~f跟p 參考網站: 1.陽性七段顯示器零件 和 2.H-Seven-segment display裝配方式 https://en.wikipedia.org/wiki/Seven-segment_display http://www.ym.edu.tw/~yhkao/iedu/electronics_03_(7447).pdf 參考對象:","title":"H_SevenSegmentDisplay 七段顯示器","url":"./H_SevenSegmentDisplay.html"},{"tags":"Arduino","text":"以下為IC 7447的解說 IC 7447零件: 用於 陽性七段顯示器 IC 7447裝配方式: 控制IC 7447: 注意: IC 7447只能用在 陽性七段顯示器 上 IC 7448才能使用在陰性七段顯示器上 參考網站: 1.IC 7447零件 和 2.IC 7447裝配方式 和 3.控制IC 7447: http://www.ym.edu.tw/~yhkao/iedu/electronics_03_(7447).pdf 參考對象:","title":"IC 7447 解碼器","url":"./IC 7447.html"},{"tags":"Arduino","text":"以下為Button的解說 按鈕零件: 按鈕功用: 1和2為接通狀態,3和4為接通狀態,但1和2跟3和4沒接通 只有在按下按鈕時1和2跟3和4才會接通 電路圖(Circuit diagram) Button裝備方式: 3.3V連接在B1,在不按下按鈕時,3.3V不會通道B3和B4,只會跟B2接通 11腳位為接收訊號,在不按下時訊號為LOW,在按下時訊號為HIGH 在B4接上電阻跟地線(GND),可保護11腳位不被雜訊干擾 Arduino範例: https://40423222.github.io/2017springcd_hw/blog/Arduino-Button.html 參考網站: 1.按鈕零件: https://tw.bid.yahoo.com/item/6-6-5MM%E5%BE%AE%E5%8B%95%E9%96%8B%E9%97%9C-%E8%BC%95%E8%A7%B8%E9%96%8B%E9%97%9C-%E6%8C%89%E9%8D%B5%E9%96%8B%E9%97%9C-%E8%87%A5%E5%BC%8F-%E9%8A%85%E8%85%B3-200%E5%80%8B%E4%B8%80-100035665893 參考對象: 2.按鈕功用: https://tw.bid.yahoo.com/item/6-6-5MM%E5%BE%AE%E5%8B%95%E9%96%8B%E9%97%9C-%E8%BC%95%E8%A7%B8%E9%96%8B%E9%97%9C-%E6%8C%89%E9%8D%B5%E9%96%8B%E9%97%9C-%E8%87%A5%E5%BC%8F-%E9%8A%85%E8%85%B3-200%E5%80%8B%E4%B8%80-100035665893 參考對象: 3.button裝備方式: https://webduino.io/tutorials/tutorial-09-button-led.html 參考對象: 4.Arduino範例: https://40423222.github.io/2017springcd_hw/blog/ 參考對象:","title":"Button 按鈕","url":"./Button.html"},{"tags":"Arduino","text":"以下為LED的解說 LED零件: LED裝配方式: 要裝多少電阻: 假設LED的正向電壓(forward voltage)為2V和正向電流(forward current)為20mA(0.02A),要知道LED這些數值,需查詢產品資料 知道這些數值後利用,R = V / I R = 電阻 , V = 電壓 , I = 電流 2(V) / 0.02(A) = 150 (ohm) 也就是要使用150Ω Resistor Arduino Uno13腳位的LED有內設電阻,所以不需要接上電阻 參考網站: 1.LED零件: https://zh.wikipedia.org/wiki/%E7%99%BC%E5%85%89%E4%BA%8C%E6%A5%B5%E7%AE%A1 參考對象: 2.LED裝配方式: https://www.youtube.com/watch?v=cWEJMusT-hI 參考對象: 3.要裝多少電阻: https://www.youtube.com/watch?v=cWEJMusT-hI http://yehnan.blogspot.tw/2012/03/arduinoled220-ohm.html 參考對象:","title":"LED 燈","url":"./LED.html"},{"tags":"Arduino","text":"以下為Resistance的解說 電阻零件: 1.膜式電阻結構圖 2.線繞電阻結構圖 電阻的值: 1.色環 2.顏色 範例: 電阻相關的公式: P = 功率 , I = 電流 , V = 電壓 , R = 電阻 , G = 電導 1.功率消耗 2.電壓降 也可寫成歐姆定律 3.電導(Conductance) 範例: 參考網站: 1.電阻零件: http://www.shimeng.org/zh/know/21.html 參考對象: 2.電阻的值: https://www.youtube.com/watch?v=cWEJMusT-hI 參考對象: 3.電阻相關的公式: https://www.youtube.com/watch?v=lnC6J9AplMc 參考對象:","title":"Resistance 電組","url":"./Resistance.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的ThreeLevel_cdMotor實驗 需要材料: Wire: n個 Button : 兩個 330Ω Resistor : 九個 10kΩ Resistor : 兩個 Potentiometer : 一個(不限電駔大小) LED : 三個 IC 7447 : 一個 H-Seven-segment display : 一個 DC Motor: 一個 Arduino Uno : 一個 Breadboard: 兩個 電路圖(Circuit diagram) 程式碼(Code) int potenPin = A4; //因為可變電阻輸出的是類比,所以要用A0~A5接收 int motorPin = 11; //對馬達的輸入 int buttonStop = 9; //停止馬達 int buttonLevel = 10; //啟動馬達轉速等級 const int NUM = 4; //要用到boolean[]內,要有const int pins[NUM] = {5, 6, 7, 8}; //對應boolean的腳位,不用在[]內打內容??? const int motorLevel = 3; //馬達有的等級,要用到boolean[]內,要有const #define t true //true等於HIHG,另一種寫法 #define f false //false等於LOW,另一種寫法 boolean data[motorLevel][NUM] = { //有3種變化(代表數字0~2),腳位有NUM個(4個輸出) {f, f, f, t}, //1 {t, f, f, f}, //2 {t, f, f, t}, //3 }; int ledCount = 3; //使用的LED數量 int ledPins[] { 2, 3, 4}; //使用到的LED腳位 void setup() { Serial.begin(9600); pinMode(potenPin, INPUT); pinMode(buttonLevel, INPUT); pinMode(buttonStop, INPUT); for (int i = 0; i < NUM; i++) { pinMode(pins[i],OUTPUT); } pinMode(motorPin,OUTPUT); for (int thisLed = 0; thisLed < ledCount; thisLed++) { pinMode(ledPins[thisLed],OUTPUT); } } void sevenSeg(int n) { //用到的腳位,要輸出的腳位 //n等於要輸出的種類 for (int i = 0; i < NUM; i++) { digitalWrite(pins[i],data[n][i] == t? HIGH : LOW); } } void loop() { int potenStates = analogRead(potenPin); Serial.println(potenStates); //可變電阻 if (potenStates < 300) { sevenSeg(0); //要輸出的種類 } else if (potenStates < 600) { sevenSeg(1); } else if (600 < potenStates) { sevenSeg(2); } int level = digitalRead(buttonLevel); //Serial.println(level); //按鈕:啟動變速 if (level == HIGH) { int potenStates = analogRead(potenPin); //Serial.println(potenStates); //可變電阻 //得出可變電阻的範圍0~1023,跟有多少電阻值沒關西 if(potenStates < 300) { analogWrite(motorPin,300); digitalWrite(ledPins[0],HIGH); digitalWrite(ledPins[1],LOW); digitalWrite(ledPins[2],LOW); } else if(potenStates <600) { //if是一段一段的讀區,所以當potenStates小300時,這裡才不會也執行 //因為上方以先執行了,就不會在往下確認 analogWrite(motorPin,600); digitalWrite(ledPins[1],HIGH); digitalWrite(ledPins[0],LOW); digitalWrite(ledPins[2],LOW); } else if(600 < potenStates) { //想要設定eles,就要在後方加上if,例如:else if(定義),不能直接else(定義) analogWrite(motorPin,900); digitalWrite(ledPins[2],HIGH); digitalWrite(ledPins[0],LOW); digitalWrite(ledPins[1],LOW); } } int bStop = digitalRead(buttonStop); if (bStop == HIGH) { for(int s = 0; s < ledCount; s++) { digitalWrite(ledPins[s],LOW); } digitalWrite(motorPin,LOW); } } 測試影片(Test video) 三段變速_直流馬達 from 40423222 on Vimeo .","title":"ThreeLevel_cdMotor 三段直流馬達","url":"./ThreeLevel_cdMotor.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的UsePotentiometer實驗 需要材料: Wire: n個 330Ω Resistor : 一個 LED : 一個 Potentiometer : 一個(不限電駔大小) Arduino Uno : 一個 電路圖(Circuit diagram) 程式碼(Code) int potPin = 3; int ledPin = 9; void setup() { Serial.begin(9600); //這題沒設pinMode(腳位,(OUT or IN)PUT) // pinMode(potPin,INPUT) // pinMode(ledPin,OUTPUT) } void loop() { int sensorValue = analogRead(potPin); //讀取potPin接收到的值,以sensorValue表示 Serial.println(sensorValue,DEC); // 如果將()內的sensorValue/4會?,不使用DEC會? sensorValue = sensorValue/4; analogWrite(ledPin,sensorValue); delay(50); } 參考網站: Lab4 Potentiometer: http://coopermaa2nd.blogspot.tw/2010/12/arduino-lab4.html.html 參考對象:","title":"UsePotentiometer 使用可變電組","url":"./UsePotentiometer.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的Fade實驗 需要材料: Wire: n個 330Ω Resistor : 一個 LED : 一個 Arduino Uno : 一個 電路圖(Circuit diagram) 程式碼(Code) int brightness = 0; //亮度,保存目前亮度 int fadeAmount = 5; //退色量,亮度調整 //int but = 0; void setup() { //Serial.begin(9600); //設定傳輸速度的值 pinMode(9,OUTPUT); } void loop() { //but = digitalRead(brightness); //將輸出的數值存入變數but裡,因為 //Serial.println(but); //在監控視窗裡顯示出序列傳輸的數值 //因為有錯誤,先關閉Serial analogWrite(9,brightness); //9腳位輸出,brightness的值 brightness = brightness + fadeAmount; //每一輪brightness會加5或-5,取決於fadeAmount的+或- if (brightness == 0 || brightness == 155) { //如果brightness等於0或是等於155,執行下方指令 fadeAmount = -fadeAmount; } delay(100); } 參考網站: Lab3 Fade: http://coopermaa2nd.blogspot.tw/2010/12/arduino-lab3-led.html 參考對象:","title":"Fade 呼吸燈","url":"./Fade.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的ButtonControl實驗 需要材料: Wire: n個 10kΩ Resistor : 一個 Button : 一個 LED : 一個 Arduino Uno : 一個 電路圖(Circuit diagram) 程式碼(Code) const int buttonPin = 2; //不知為何要在前方打上const //2腳位連結到按鈕 const int ledPin = 13; //13腳位連結到 int buttonState = 0; //宣告buttonState等於0 void setup() { pinMode(buttonPin,INPUT); //將2腳位設定為輸入,也就是接收 pinMode(ledPin,OUTPUT); } void loop() { buttonState = digitalRead(buttonPin); //讀取buttonPin接收的訊號,以buttonState表示 if (buttonState == HIGH) { //如果buttonState等於HIGH,就執行下方指令 digitalWrite(ledPin, HIGH); } //如果buttonState不等於HIGH,就執行下方指令 else { digitalWrite(ledPin, LOW); } } 參考網站: Lad2 Button: http://coopermaa2nd.blogspot.tw/2010/12/arduino-lab2-led.html 參考對象:","title":"ButtonControl 按鈕控制","url":"./ButtonControl.html"},{"tags":"Arduino","text":"以下為Arduino Uno板的LED燈實驗 需要材料: LED : 一個 Arduino Uno : 一個 電路圖(Circuit diagram) 程式碼(Code) void setup() { pinMode(13,OUTPUT); //13腳位為輸出 } void loop() { digitalWrite(13,HIGH); //13腳位輸出HIGH delay(1000); //持續1秒 digitalWrite(13,LOW); //13腳位輸出LOW delay(1000); } 參考網站: Lad1 Blink: http://coopermaa2nd.blogspot.tw/2010/12/arduino-lab1-blinking-led.html 參考對象:","title":"Blink 啟動LED","url":"./Blink.html"},{"tags":"Arduino","text":"參考Arduino快速紹手指南(Maik Schmidt) 需要材料: LED : 一個 Arduino Uno : 一個 電路圖(Circuit diagram): 程式碼(Code): //使用方式: 開啟序列輸入1或2來啟動LED const unsigned int ledPin = 13; //const代表這變數不會改變 void setup() { pinMode(ledPin, OUTPUT); Serial.begin(9600); } void loop() { if(Serial.available() > 0) { //回傳資料 int command = Serial.read(); //讀取資料 if(command == '1') { //鍵盤要輸入的值為1,注意變數以外的值,要使用''包住 digitalWrite(ledPin, HIGH); Serial.print(\"輸入1號:\"); //標題名稱 //注意要將Serial.print(\"輸入1號:\");放置於Serial.println(\"LED ON\");上一行,避免出錯 Serial.println(\"LED ON\"); //顯示LED ON,注意要使用\"\" } else if(command == '2') { digitalWrite(ledPin, LOW); Serial.print(\"輸入2號:\"); Serial.println(\"LED OFF\"); } else{ Serial.print(\"Unknown command:\"); //標題名稱,下方可選擇要顯示的值 Serial.println(command); //顯示ASCII碼(十進位) //Serial.println(command, DEC); //顯示ASCII碼(十進位) //Serial.println(command, HEX); //顯示ASCII碼(十六進位) //Serial.println(command, OCT); //Serial.println(command, BIN); //顯示ASCII碼(二進位), //注意:程式會自動將第一位數給消去(總共有8位數),因為第一位數一定是零 //Serial.println(command, BYTE); //已不被支援 } } } / 可輸入鍵盤上所有的符號,但只會一個個讀取. 例如:輸入15,系統會先讀取1後再讀取5 ASCII資續:https://zh.wikipedia.org/wiki/ASCII 決定數字系統 int decimal = 4711; int binary = B1001001100111; int octal = 011147; int hexadecimal = 0x1267; 二進位用B來開頭,八進位用0來開頭,十六進位用0x /","title":"電腦控制","url":"./ComputerControl.html"}]};